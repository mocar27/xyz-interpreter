-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelXyzGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsXyzGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsXyzGrammar.Ident -> Result
transIdent x = case x of
  AbsXyzGrammar.Ident string -> failure x

transProgram :: Show a => AbsXyzGrammar.Program' a -> Result
transProgram x = case x of
  AbsXyzGrammar.MyProgram _ stmts -> failure x

transArg :: Show a => AbsXyzGrammar.Arg' a -> Result
transArg x = case x of
  AbsXyzGrammar.ArgVal _ type_ ident -> failure x
  AbsXyzGrammar.ArgRef _ type_ ident -> failure x

transItem :: Show a => AbsXyzGrammar.Item' a -> Result
transItem x = case x of
  AbsXyzGrammar.NoInit _ ident -> failure x
  AbsXyzGrammar.Init _ ident expr -> failure x

transBlock :: Show a => AbsXyzGrammar.Block' a -> Result
transBlock x = case x of
  AbsXyzGrammar.StmtBlock _ stmts -> failure x

transStmt :: Show a => AbsXyzGrammar.Stmt' a -> Result
transStmt x = case x of
  AbsXyzGrammar.Empty _ -> failure x
  AbsXyzGrammar.Decl _ type_ items -> failure x
  AbsXyzGrammar.Assign _ ident expr -> failure x
  AbsXyzGrammar.Ret _ expr -> failure x
  AbsXyzGrammar.VoidRet _ -> failure x
  AbsXyzGrammar.If _ expr block -> failure x
  AbsXyzGrammar.IfElse _ expr block1 block2 -> failure x
  AbsXyzGrammar.While _ expr block -> failure x
  AbsXyzGrammar.FunctionDef _ type_ ident args block -> failure x
  AbsXyzGrammar.StmtExp _ expr -> failure x

transType :: Show a => AbsXyzGrammar.Type' a -> Result
transType x = case x of
  AbsXyzGrammar.Integer _ -> failure x
  AbsXyzGrammar.String _ -> failure x
  AbsXyzGrammar.Boolean _ -> failure x
  AbsXyzGrammar.Void _ -> failure x
  AbsXyzGrammar.Function _ type_ types -> failure x

transExpr :: Show a => AbsXyzGrammar.Expr' a -> Result
transExpr x = case x of
  AbsXyzGrammar.ExpVar _ ident -> failure x
  AbsXyzGrammar.ExpLitInt _ integer -> failure x
  AbsXyzGrammar.ExpString _ string -> failure x
  AbsXyzGrammar.ExpLitTrue _ -> failure x
  AbsXyzGrammar.ExpLitFalse _ -> failure x
  AbsXyzGrammar.ExpApp _ ident exprs -> failure x
  AbsXyzGrammar.ExpNeg _ expr -> failure x
  AbsXyzGrammar.ExpNot _ expr -> failure x
  AbsXyzGrammar.ExpMul _ expr1 mulop expr2 -> failure x
  AbsXyzGrammar.ExpAdd _ expr1 addop expr2 -> failure x
  AbsXyzGrammar.ExpRel _ expr1 relop expr2 -> failure x
  AbsXyzGrammar.ExpAnd _ expr1 expr2 -> failure x
  AbsXyzGrammar.ExpOr _ expr1 expr2 -> failure x
  AbsXyzGrammar.ExpLambda _ args type_ block -> failure x

transAddOp :: Show a => AbsXyzGrammar.AddOp' a -> Result
transAddOp x = case x of
  AbsXyzGrammar.Plus _ -> failure x
  AbsXyzGrammar.Minus _ -> failure x

transMulOp :: Show a => AbsXyzGrammar.MulOp' a -> Result
transMulOp x = case x of
  AbsXyzGrammar.Multi _ -> failure x
  AbsXyzGrammar.Div _ -> failure x
  AbsXyzGrammar.Mod _ -> failure x

transRelOp :: Show a => AbsXyzGrammar.RelOp' a -> Result
transRelOp x = case x of
  AbsXyzGrammar.LThan _ -> failure x
  AbsXyzGrammar.Leq _ -> failure x
  AbsXyzGrammar.GThan _ -> failure x
  AbsXyzGrammar.Geq _ -> failure x
  AbsXyzGrammar.Eq _ -> failure x
  AbsXyzGrammar.NEq _ -> failure x
