-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

module ParserLexer.AbsXyzGrammar where

-- | The abstract syntax of language xyz-grammar.

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = MyProgram a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = ArgVal a (Type' a) Ident | ArgRef a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Item = Item' BNFC'Position
data Item' a = NoInit a Ident | Init a Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = StmtBlock a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = Empty a
    | Decl a (Type' a) [Item' a]
    | Assign a Ident (Expr' a)
    | Ret a (Expr' a)
    | VoidRet a
    | If a (Expr' a) (Block' a)
    | IfElse a (Expr' a) (Block' a) (Block' a)
    | While a (Expr' a) (Block' a)
    | FunctionDef a (Type' a) Ident [Arg' a] (Block' a)
    | StmtExp a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = Integer a
    | String a
    | Boolean a
    | Void a
    | Function a (Type' a) [Type' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = ExpVar a Ident
    | ExpLitInt a Integer
    | ExpString a String
    | ExpLitTrue a
    | ExpLitFalse a
    | ExpApp a Ident [Expr' a]
    | ExpNeg a (Expr' a)
    | ExpNot a (Expr' a)
    | ExpMul a (Expr' a) (MulOp' a) (Expr' a)
    | ExpAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ExpRel a (Expr' a) (RelOp' a) (Expr' a)
    | ExpAnd a (Expr' a) (Expr' a)
    | ExpOr a (Expr' a) (Expr' a)
    | ExpLambda a [Arg' a] (Type' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Multi a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LThan a | Leq a | GThan a | Geq a | Eq a | NEq a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    MyProgram p _ -> p

instance HasPosition Arg where
  hasPosition = \case
    ArgVal p _ _ -> p
    ArgRef p _ _ -> p

instance HasPosition Item where
  hasPosition = \case
    NoInit p _ -> p
    Init p _ _ -> p

instance HasPosition Block where
  hasPosition = \case
    StmtBlock p _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    Empty p -> p
    Decl p _ _ -> p
    Assign p _ _ -> p
    Ret p _ -> p
    VoidRet p -> p
    If p _ _ -> p
    IfElse p _ _ _ -> p
    While p _ _ -> p
    FunctionDef p _ _ _ _ -> p
    StmtExp p _ -> p

instance HasPosition Type where
  hasPosition = \case
    Integer p -> p
    String p -> p
    Boolean p -> p
    Void p -> p
    Function p _ _ -> p

instance HasPosition Expr where
  hasPosition = \case
    ExpVar p _ -> p
    ExpLitInt p _ -> p
    ExpString p _ -> p
    ExpLitTrue p -> p
    ExpLitFalse p -> p
    ExpApp p _ _ -> p
    ExpNeg p _ -> p
    ExpNot p _ -> p
    ExpMul p _ _ _ -> p
    ExpAdd p _ _ _ -> p
    ExpRel p _ _ _ -> p
    ExpAnd p _ _ -> p
    ExpOr p _ _ -> p
    ExpLambda p _ _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Multi p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LThan p -> p
    Leq p -> p
    GThan p -> p
    Geq p -> p
    Eq p -> p
    NEq p -> p

