-- Skeleton of run and runFile inherited from Test, which is file runner initially generated by BNFC. 

module Interpreter.Interpreter ( run, runFile ) where

import TypeChecker.TypeChecker
import Evaluator.Evaluator
import ParserLexer.ParXyzGrammar   ( pProgram, myLexer )

import Prelude                     ( String, (++), IO, (>>=), putStrLn, FilePath, readFile )

import System.Exit                 ( exitSuccess, exitFailure )

runFile :: FilePath -> IO ()
runFile f = readFile f >>= run

run :: String -> IO ()
run s = case prog of
    Left err -> do 
      putStrLn "\nParser failed!\n"
      putStrLn (err ++ "\n")
      exitFailure
    Right tree -> do
      case runTypeChecker tree of
        Left err -> do
          putStrLn "\nTypeChecker failed!\n"
          putStrLn (err ++ "\n")
          exitFailure
        Right _ -> do
          programResult <- runEvaluator tree 
          case programResult of
            Left err -> do
              putStrLn "\nEvaluator failed!\n"
              putStrLn (err ++ "\n")
              exitFailure
            Right _ -> do
              putStrLn "\nEvaluation successful!\n"
              exitSuccess
  where
    ts = myLexer s
    prog = pProgram ts
