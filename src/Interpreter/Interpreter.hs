-- Skeleton of run and runFile inherited from Test, which is file runner initially generated by BNFC. 

module Interpreter.Interpreter ( run, runFile ) where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile, print, putStr
  )
import ParserLexer.AbsXyzGrammar   ()
import ParserLexer.LexXyzGrammar   ( Token, mkPosToken )
import ParserLexer.ParXyzGrammar   ( pProgram, myLexer )
import ParserLexer.PrintXyzGrammar ( printTree )
import System.Exit                 ( exitFailure )

-- import TypeChecker.TypeChecker     ( runTypeChecker )

runFile :: FilePath -> IO ()
runFile f = readFile f >>= run

-- odpala wszystko
run :: String -> IO ()
run s =
  case prog of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrLn "Tokens:"
      mapM_ (putStrLn . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      print tree
  where
  ts = myLexer s
  prog = pProgram ts
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]
