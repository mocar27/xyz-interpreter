-- Skeleton of run and runFile inherited from Test, which is file runner initially generated by BNFC. 

module Interpreter.Interpreter ( run, runFile ) where

import Prelude                     ( (.),
                                    Either(..), (>),
                                    String, (++),
                                    Show, show, 
                                    IO, (>>), (>>=), mapM_, putStrLn,
                                    FilePath, readFile )
import ParserLexer.ParXyzGrammar   ( pProgram, myLexer )
import System.Exit                 ( exitSuccess, exitFailure )

import TypeChecker.TypeChecker     ( runTypeChecker )
-- import Evaluator.Evaluator         ( runEvaluator )

runFile :: FilePath -> IO ()
runFile f = readFile f >>= run

run :: String -> IO ()
run s = case prog of
    Left err -> do 
      putStrLn "\nParser failed!\n"
      putStrLn (err ++ "\n")
      exitFailure
    Right tree -> do
      case runTypeChecker tree of
        Left err -> do
          putStrLn "\nTypeChecker failed!\n"
          putStrLn (err ++ "\n")
          exitFailure
        Right _ -> do -- TODO
          putStrLn "\nType checking successful!\n"
    --       programResult <- runEvaluator tree 
    --       case programResult of
    --         Left err -> do -- error
    --           putStrLn "\nEvaluator failed!\n"
    --           putStrLn ("Error message: " ++ err ++ "\n")
    --           exitFailure
    --         Right _ -> do -- TODO
    --           putStrLn "\nEvaluation successful!\n"
    --           putStrLn "\nProgram result:"
    --         --   putStrLn . show programResult
    --           exitSuccess
  where
    ts = myLexer s
    prog = pProgram ts
